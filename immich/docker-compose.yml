version: "3.8"

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    entrypoint: [ "/bin/sh", "./start-server.sh" ]
    volumes:
      #- ${UPLOAD_LOCATION}:/usr/src/app/upload
      - immich-upload:/usr/src/app/upload
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    depends_on:
      - redis
      - database
      - typesense
    networks:
      - proxy
      - immich
    labels:
      traefik.enable: "true"
      traefik.docker.network: proxy
      traefik.http.routers.media-immich-api.rule: Host(`${IMMICH_DOMAIN}`) && Pathprefix(`/api`)
      traefik.http.services.media-immich-api.loadbalancer.server.port: "3001"

      traefik.http.routers.media-immich-api.middlewares: service-immich-api-strip
      traefik.http.middlewares.service-immich-api-strip.stripprefix.prefixes: /api

      traefik.http.routers.media-immich-api.entrypoints: websecure
      traefik.http.routers.media-immich-api.tls: "true"
      traefik.http.routers.media-immich-api.tls.certresolver: leresolver

      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: unless-stopped

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:release
    entrypoint: [ "/bin/sh", "./start-microservices.sh" ]
    volumes:
      #- ${UPLOAD_LOCATION}:/usr/src/app/upload
      - immich-upload:/usr/src/app/upload
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    depends_on:
      - redis
      - database
      - typesense
    networks:
      - immich
    labels:
      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: unless-stopped

  immich-machine-learning:
    container_name: immich_machine_learning
    #image: ghcr.io/immich-app/immich-machine-learning:release
    build: 
      context: ./machine-learning
      dockerfile: Dockerfile
    command: python main.py
    volumes:
      - ./machine-learning/src:/usr/src/app
      - immich-upload:/usr/src/app/upload
      - model-cache:/cache
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    networks:
      - immich
    ports:
      - 3003:3003
    labels:
      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: always
    logging:
      options:
        max-size: "50m"
        max-file: "3"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  immich-web:
    container_name: immich_web
    image: ghcr.io/immich-app/immich-web:release
    entrypoint: [ "/bin/sh", "./entrypoint.sh" ]
    env_file:
      - .env
    networks:
      - proxy
      - immich
    labels:
      traefik.enable: "true"
      traefik.docker.network: proxy
      traefik.http.routers.media-immich.rule: Host(`${IMMICH_DOMAIN}`)
      traefik.http.services.media-immich.loadbalancer.server.port: "3000"

      traefik.http.routers.media-immich.entrypoints: websecure
      traefik.http.routers.media-immich.tls: "true"
      traefik.http.routers.media-immich.tls.certresolver: leresolver

      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: unless-stopped

  typesense:
    container_name: immich_typesense
    image: typesense/typesense:0.25.0.rc14
    command: '--data-dir /data --api-key=${TYPESENSE_API_KEY}'
    #environment:
    #  - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
    #  - TYPESENSE_DATA_DIR=/data
    logging:
      driver: none
    volumes:
      - tsdata:/data
    networks:
      - immich
    labels:
      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: unless-stopped

  redis:
    container_name: immich_redis
    image: redis:6.2
    networks:
      - immich
    labels:
      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true"
    restart: unless-stopped

  database:
    container_name: immich_postgres
    image: postgres:14
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - immich
    labels:
      # set watchtower to monitor only and do not perform the update
      com.centurylinklabs.watchtower.monitor-only: "true" 
    restart: unless-stopped

volumes:
  pgdata:
  immich-upload:
    external: true
  model-cache:
  tsdata:

networks:
  proxy:
    external: true
  immich: