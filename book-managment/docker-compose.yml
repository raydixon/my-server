version: "3.4"
services:
  kavita:
    build: ./kavita
    container_name: kavita
    volumes:
      - ./books:/books
      - ./config_kavita:/kavita/config
    ports:
      - 5000:5000
    restart: unless-stopped

    # Uncomment if you want to implement healthchecks
    healthcheck:
      test: curl --fail http://localhost:5000 || exit 1
      interval: 300s
      retries: 3
      start_period: 30s
      timeout: 15s


  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data

  db:
    image: docker.io/library/postgres:15
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    user: 1000:1000
    restart: unless-stopped
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - "8150:8000"
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./paperless:/usr/src/paperless/consume
    env_file: .env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998

  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.8
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    restart: unless-stopped

  change-vol-ownership:
    # We can use any image we want as long as we can chown
    image: ubuntu
    # Need a user priviliged enough to chown
    user: "root"
    # Specify the group in question
    group_add:
      - '1000'
    volumes:
      # The volume to chown
      - media:/tmp/change-ownership/1
      - data:/tmp/change-ownership/2
    command: chown -R 1000:1000 /tmp/change-ownership

volumes:
  data:
  media:
  pgdata:
  redisdata:
